// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle utilisateur
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  reservations  Reservation[]
  promoCode     PromoCode[]
}

// Modèle de compte pour l'authentification
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Modèle de session pour l'authentification
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modèle de vérification pour l'authentification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modèle de code promotionnel
model PromoCode {
  id          String        @id @default(cuid())
  code        String        @unique
  hours       Float
  hoursLeft   Float
  userId      String
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  user        User          @relation(fields: [userId], references: [id])
  reservations Reservation[]
}

// Modèle de réservation
model Reservation {
  id          String    @id @default(cuid())
  startTime   DateTime
  endTime     DateTime
  status      ReservationStatus @default(CONFIRMED)
  userId      String
  promoCodeId String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id])
  promoCode   PromoCode? @relation(fields: [promoCodeId], references: [id])
}

// Modèle de configuration des créneaux horaires
model TimeSlotConfig {
  id          String    @id @default(cuid())
  name        String
  duration    Int       // Durée en minutes
  setupTime   Int       // Temps de préparation en minutes
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Modèle de blog
model BlogPost {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String    @db.Text
  excerpt     String?   @db.Text
  coverImage  String?
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Énumération des rôles utilisateur
enum Role {
  USER
  ADMIN
}

// Énumération des statuts de réservation
enum ReservationStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  WEATHER_CANCELLED
}
